name: CI/CD - API

on:
  push:
    branches:
      - 'master'
      - 'dev'
    paths:
      - 'api/**'

env:
  NODE_VERSION: '16'

jobs:
  lint:
    name: 'Lint'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'

      - name: Install
        run: npm ci --no-optional --workspace api

      - name: Lint Source
        run: npm run lint:src --workspace api

      - name: Lint Tests
        run: npm run lint:tests --workspace api

  build:
    name: 'Build'
    runs-on: ubuntu-latest

    outputs:
      changed: ${{ steps.check.outputs.changed }}
      version: ${{ steps.check.outputs.version }}
      type: ${{ steps.check.outputs.type }}

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'

      - name: Version Check
        id: check
        uses: EndBug/version-check@v2.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          file-name: ./api/package.json

      - name: Install
        run: npm ci --no-optional --workspace api

      - name: Build
        run: npm run build --workspace api

  test:
    name: 'Test and Coverage'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'

      - name: Install
        run: npm ci --no-optional --workspace api

      - name: Init
        run: npm run init --workspace api
        env:
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'

      - name: Test and Coverage
        run: npm run test:cov --workspace api
        env:
          TEST_DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'

  seed:
    name: 'Test Seed'
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432/tcp
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: ${{env.NODE_VERSION}}
          cache: 'npm'

      - name: Install
        run: npm ci --no-optional --workspace api

      - name: Init
        run: npm run init --workspace api
        env:
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'

      - name: Seed
        run: npm run seed --workspace api
        env:
          DATABASE_URL: 'postgres://postgres:postgres@localhost:${{ job.services.postgres.ports[5432] }}/postgres'

  deploy:
    name: 'Deploy'
    runs-on: ubuntu-latest
    needs: [build, test, seed]

    if: needs.build.outputs.changed == 'true'

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Push to dokku
        uses: dokku/github-action@master
        with:
          branch: 'master'
          git_remote_url: 'ssh://dokku@${{ secrets.DOKKU_SSH_HOST }}/${{ secrets.DOKKU_APPNAME }}'
          ssh_private_key: ${{ secrets.DOKKU_SSH_KEY }}
